{"version":3,"file":"client.js","sourceRoot":"","sources":["client.ts"],"names":[],"mappings":"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","sourcesContent":["import {\r\n    ChannelMessage,\r\n    ConnectMessage,\r\n    isMetadataMessage,\r\n    DataMessage,\r\n    Message, Ping,\r\n    RequestPing\r\n} from \"./lib.js\";\r\n\r\nimport { w3cwebsocket } from 'websocket/index.js'\r\n\r\n/* console.logs the parameters if debug mode is on\r\n * @param args the parameters to console.log\r\n*/\r\nexport function showDebugMsg(...args: any) {\r\n    if ((process.env.DEBUG as string === 'true'))\r\n        console.log(...args);\r\n}\r\n\r\nfunction isRequestPing(m: Message): m is RequestPing {\r\n    return m.type === 'rping';\r\n}\r\n\r\nfunction isPingMessage(m: Message): m is Ping {\r\n    return m.type === 'ping';\r\n}\r\n\r\nfunction isChannelMessage(m: Message): m is ChannelMessage {\r\n    return isDataMessage(m) || isRequestPing(m) || isPingMessage(m);\r\n}\r\n\r\nfunction isDataMessage(m: Message): m is DataMessage {\r\n    return m.type === 'data';\r\n}\r\n\r\nenum LiveState {\r\n    ALIVE, DEAD, UNKNOWN\r\n}\r\n\r\ntype LiveListener = () => void;\r\ntype TerminateListener = (reason:any) => void;\r\n\r\ntype ChannelListener = (data: any) => void;\r\ntype Channel = {\r\n    dataListeners: ChannelListener[];\r\n    dataListenersOnce: ChannelListener[];\r\n    state: LiveState;\r\n    prevState: LiveState;\r\n    aliveListeners: LiveListener[];\r\n    deadListeners: LiveListener[];\r\n    currentTimer?: NodeJS.Timeout;//TODO stop using nodejs classes\r\n};\r\n\r\n// @ts-ignore\r\nexport default function makeClient(host:string = undefined, onTerminate:TerminateListener = undefined) { //returns a grage object\r\n    let protocol = 'wss';\r\n\r\n    if(globalThis.location) {\r\n        if (location.protocol !== 'https:')\r\n            protocol = 'ws';\r\n\r\n        host ??= `${location.hostname}:${location.port}`;\r\n    }\r\n    showDebugMsg(`${protocol}://${host}/ws`);\r\n    const ws = new w3cwebsocket(`${protocol}://${host}/ws`);\r\n\r\n    //list of listeners for when the websocket connects\r\n    let openListeners: LiveListener[] | undefined = [];\r\n\r\n    const channels: {\r\n        [id: string]: Channel;\r\n    } = {};\r\n\r\n    /**\r\n     * Sends a message on the websocket, returns any error which occurs\r\n     * @param m the message to send\r\n     */\r\n    function wsSend(m: Message) {\r\n        try {\r\n            showDebugMsg('[Send]', m);\r\n            ws.send(JSON.stringify(m));\r\n            return false;\r\n        } catch (error) {\r\n            handleError(error);\r\n            return error;\r\n        }\r\n    }\r\n\r\n    const  grage = {\r\n        options: {\r\n            /**\r\n             * how long to wait before reloading the page\r\n             * this prevents exploding if errors occur at page load time\r\n             */\r\n            reloadTime: 5 * 1000,\r\n\r\n            /**\r\n             * how long to wait before actively checking if a device is alive //JohnLan. To be exact, this is to check if a channel, rather than a device, is alive\r\n             */\r\n            aliveTimeout: 10 * 1000,\r\n\r\n            /**\r\n             * how long to wait for a device to respond to a ping request\r\n             */\r\n            pingTimeout: 5 * 1000,\r\n\r\n            /**\r\n             * if a device is not responding,\r\n             * how long to wait before retrying another ping request\r\n             */\r\n            pingRetry: 30 * 1000,\r\n\r\n            /**\r\n             * how long the door has been consecutively open before an alert is sent \r\n             */\r\n            maxOpenTimeAllowed: 30 * 60 * 1000,  // 1 hr,\r\n            alertEmailInterval: 60 * 60 * 1000, // 1 hour\r\n        },\r\n        /**\r\n         * Registers a listener which is called upon connection to server\r\n         * @param cb the listener\r\n         */\r\n        onOpen(cb: LiveListener) {\r\n            if (openListeners === undefined)\r\n                cb();\r\n            else\r\n                openListeners.push(cb);\r\n        },\r\n        /**\r\n         * Gets the ID of the currently running app\r\n         */\r\n        getAppID() {\r\n            const url = window.location.pathname.slice(1);\r\n            const tokens = url.split('/');\r\n            if (tokens[0] !== 'apps')\r\n                throw new Error('Cannot get data: invalid app');\r\n            return tokens[1];\r\n        },\r\n        /**\r\n         * Gets the locally stored data/settings for this app\r\n         */\r\n        getData(defaultValue?: any) {\r\n            const app = grage.getAppID();\r\n            const data = window.localStorage.getItem(app);\r\n            if (data)\r\n                return JSON.parse(data);\r\n            else\r\n                return defaultValue;\r\n        },\r\n        /**\r\n         * Saves some data to the local storage for this app.\r\n         * Overwrites old data\r\n         * @param data the data to save\r\n         */\r\n        saveData(data: any) {\r\n            window.localStorage.setItem(grage.getAppID(), JSON.stringify(data));\r\n        },\r\n\r\n        /**\r\n         * Terminates the connection and reloads the app.\r\n         */\r\n        terminate(reason:any = undefined) {\r\n            //close ws if not already\r\n            console.log(\"grage channel closing handler\")\r\n            if (ws.readyState === w3cwebsocket.OPEN || ws.readyState === w3cwebsocket.CONNECTING) {\r\n                ws.close();\r\n            }\r\n\r\n            // User error handler\r\n            if(onTerminate){\r\n                return onTerminate(reason);\r\n            }\r\n\r\n            if(globalThis.location)\r\n            {\r\n                //reload page in 5 seconds\r\n                setTimeout(\r\n                    () => window.location.reload(),\r\n                    grage.options.reloadTime\r\n                );\r\n            }\r\n            else\r\n            {\r\n                console.log('terminated websocket')\r\n                globalThis.process.exit(-1)\r\n            }\r\n        },\r\n        /**\r\n         * Request a device to ping\r\n         * @param id the device to request ping from\r\n         */\r\n        requestPing(id: string) {\r\n            //send ping\r\n            const m: RequestPing = {\r\n                type: \"rping\",\r\n                id,\r\n                fromDevice: false\r\n            };\r\n            if (wsSend(m)) return;\r\n        },\r\n        /**\r\n         * Connects to a channel and listens to any messages on channel\r\n         * @param id the id of the channel\r\n         * @param cb the listener for messages\r\n         */\r\n        connect(id: string, cb: ChannelListener) {\r\n            //if not connected to channel yet\r\n            if (!channels.hasOwnProperty(id)) {\r\n                //initialize channelListeners\r\n                channels[id] = {\r\n                    dataListeners: [],\r\n                    dataListenersOnce: [],\r\n                    aliveListeners: [],\r\n                    deadListeners: [],\r\n                    state: LiveState.UNKNOWN,\r\n                    prevState: LiveState.UNKNOWN,\r\n                };\r\n\r\n                //send channel connect message\r\n                const m: ConnectMessage = {\r\n                    type: \"connect\",\r\n                    id,\r\n                };\r\n                if (wsSend(m)) return;\r\n            }\r\n\r\n            //request new data\r\n            grage.requestPing(id);\r\n            channels[id].dataListeners.push(cb);\r\n        },\r\n        /**\r\n         * Listens to a single message from a channel\r\n         * @param id the channel to listen to\r\n         * @param cb the listener\r\n         */\r\n        once(id: string, cb: ChannelListener) {\r\n            channels[id].dataListenersOnce.push(cb);\r\n        },\r\n        /**\r\n         * Sends data to channel\r\n         * @param id the id of the channel\r\n         * @param data the data to send\r\n         */\r\n        send(id: string, data: any) {\r\n            const m: DataMessage = {\r\n                type: \"data\",\r\n                data,\r\n                id,\r\n                fromDevice: false,\r\n            };\r\n            if (wsSend(m)) return;\r\n        },\r\n\r\n        onAlive(id: string, cb: LiveListener) {\r\n            const channel = channels[id];\r\n            if (channel.state === LiveState.ALIVE) {\r\n                cb();\r\n            }\r\n            channel.aliveListeners.push(cb);\r\n        },\r\n\r\n        onDead(id: string, cb: LiveListener) {\r\n            const channel = channels[id];\r\n            if (channel.state === LiveState.DEAD)\r\n                cb();\r\n            channel.deadListeners.push(cb);\r\n        }\r\n    };\r\n\r\n    /**\r\n     * Call this when a device is known to be alive\r\n     * @param id the device which is alive\r\n     */\r\n    function assertAlive(id: string) {\r\n        showDebugMsg('[Alive]', id);\r\n        const channel = channels[id];\r\n\r\n        //remove any pending timeout\r\n        clearTimeout(channel.currentTimer);\r\n\r\n        //channel just became alive\r\n        if (channel.prevState !== LiveState.ALIVE) {\r\n            channel.prevState = LiveState.ALIVE;\r\n            //protect from stack explosion by running in next tick\r\n            setTimeout(() => {\r\n                showDebugMsg('[Notifying alive]', id);\r\n                for (const listener of channel.aliveListeners)\r\n                    listener();\r\n            });\r\n        }\r\n\r\n        channel.state = LiveState.ALIVE;\r\n\r\n        //make sure to periodically check if channel is actually alive\r\n        channel.currentTimer = setTimeout(function checkAlive() {\r\n            channel.state = LiveState.UNKNOWN;\r\n\r\n            //channel has not said anything for a long time,\r\n            //send it a ping to see if its still alive\r\n            pingTest(id);\r\n        }, grage.options.aliveTimeout);\r\n    }\r\n\r\n    /**\r\n     * Tests if a device is still alive by pinging it and waiting for response\r\n     * @param id the device\r\n     */\r\n    function pingTest(id: string) {\r\n        const channel = channels[id];\r\n\r\n        showDebugMsg('Pinging', id, '...');\r\n        grage.requestPing(id);\r\n\r\n        //if device does respond, assertAlive will get called,\r\n        //canceling the death timer\r\n        channel.currentTimer = setTimeout(function dead() {\r\n            //otherwise no response, its dead.\r\n            assertDead(id);\r\n        }, grage.options.pingTimeout);\r\n    }\r\n\r\n    /**\r\n     * Called when it is known a device is dead\r\n     * @param id the device known to be dead\r\n     */\r\n    function assertDead(id: string) {\r\n        showDebugMsg('[Dead]', id);\r\n        const channel = channels[id];\r\n\r\n        //remove any pending timeout\r\n        clearTimeout(channel.currentTimer);\r\n\r\n        //channel just became dead\r\n        if (channel.prevState !== LiveState.DEAD) {\r\n            channel.prevState = LiveState.DEAD;\r\n            //protect from stack explosion by running in next tick\r\n            setTimeout(() => {\r\n                showDebugMsg('[Notifying dead]', id);\r\n                for (const listener of channel.deadListeners)\r\n                    listener();\r\n            });\r\n        }\r\n\r\n        channel.state = LiveState.DEAD;\r\n\r\n        //try pinging it again later\r\n        setTimeout(() => pingTest(id), grage.options.pingRetry);\r\n    }\r\n\r\n    ws.onmessage = evt => {\r\n        try {\r\n            const m = JSON.parse(evt.data as string) as Message;\r\n            showDebugMsg('[recv]', m);\r\n            //ignore messages from other browsers, ignore non subscribed messages\r\n            if (isChannelMessage(m) && m.fromDevice && channels.hasOwnProperty(m.id)) { ////data || ping || rping\r\n                //since this device just sent a message,\r\n                //it must be alive\r\n                assertAlive(m.id);\r\n\r\n                const channel = channels[m.id];\r\n\r\n                if (isDataMessage(m)) { //data \r\n                    //send to every listener in the proper channel\r\n                    for (const listener of channel.dataListeners) {\r\n                        listener(m.data);\r\n                    }\r\n\r\n                    //send to every once listener\r\n                    for (const listener of channel.dataListenersOnce) {\r\n                        listener(m.data);\r\n                    }\r\n\r\n                    //then clear list of once listeners\r\n                    channel.dataListenersOnce = [];\r\n                }\r\n            } else if (isMetadataMessage(m)) { //metadata msg //added by John\r\n                //connect(m.id);\r\n                showDebugMsg('no handler for metadata yet')\r\n            }else {\r\n                console.warn('[Unknown message type or msg not from device-type]', m);\r\n            }\r\n        } catch (error) {\r\n            return handleError(error);\r\n        }\r\n    };\r\n\r\n    ws.onopen = function handleOpen() {\r\n        showDebugMsg('[Websocket open]');\r\n        //call every listener upon connect\r\n        if (openListeners !== undefined)\r\n            for (const handler of openListeners)\r\n                handler();\r\n        openListeners = undefined;\r\n    };\r\n\r\n    function handleError(error: Error) {\r\n        console.error('[Websocket error]', error);\r\n        //if debug, stop, else try reload page\r\n        if (!(process.env.DEBUG as string === 'true'))\r\n            grage.terminate(error);\r\n        else {\r\n            console.log('[Debug mode] frozen');\r\n            debugger;\r\n        }\r\n    }\r\n\r\n    ws.onerror = (ev) => {\r\n\r\n        handleError(ev as any as Error);\r\n    };\r\n\r\n    ws.onclose = grage.terminate;\r\n\r\n    return grage;\r\n}\r\n"]}