{"version":3,"file":"lib.js","sourceRoot":"","sources":["lib.ts"],"names":[],"mappings":";;;AAUA,SAAgB,cAAc,CAAC,CAAU;IACrC,OAAO,CAAC,CAAC,IAAI,KAAK,OAAO,CAAC;AAC9B,CAAC;AAFD,wCAEC;AAUD,SAAgB,iBAAiB,CAAC,CAAU;IACxC,OAAO,CAAC,CAAC,IAAI,KAAK,UAAU,CAAC;AACjC,CAAC;AAFD,8CAEC;AAOD,SAAgB,gBAAgB,CAAC,CAAU;IACvC,OAAO,CAAC,CAAC,IAAI,KAAK,SAAS,CAAC;AAChC,CAAC;AAFD,4CAEC;AAQD,SAAgB,gBAAgB,CAAC,CAAU;IACvC,OAAO,aAAa,CAAC,CAAC,CAAC,IAAI,aAAa,CAAC,CAAC,CAAC,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC;AACpE,CAAC;AAFD,4CAEC;AAOD,SAAgB,aAAa,CAAC,CAAU;IACpC,OAAO,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC;AAC7B,CAAC;AAFD,sCAEC;AAYD,SAAgB,aAAa,CAAC,CAAU;IACpC,OAAO,CAAC,CAAC,IAAI,KAAK,OAAO,CAAC;AAC9B,CAAC;AAFD,sCAEC;AAED,SAAgB,aAAa,CAAC,CAAU;IACpC,OAAO,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC;AAC7B,CAAC;AAFD,sCAEC","sourcesContent":["export interface Message {\r\n    type: 'error' | 'metadata' | 'connect' | 'data' | 'receive' | 'rping' | 'ping';\r\n}\r\n\r\n\r\nexport interface ErrorMessage extends Message {\r\n    type: 'error';\r\n    error: string;\r\n}\r\n\r\nexport function isErrorMessage(m: Message): m is ErrorMessage {\r\n    return m.type === 'error';\r\n}\r\n\r\nexport interface MetadataMessage extends Message {\r\n    type: 'metadata';\r\n    connectionTimeout: number;\r\n    connectedChannels: string[];\r\n\r\n    [key: string]: any;\r\n}\r\n\r\nexport function isMetadataMessage(m: Message): m is MetadataMessage {\r\n    return m.type === 'metadata';\r\n}\r\n\r\nexport interface ConnectMessage extends Message {\r\n    type: 'connect';\r\n    id: string;\r\n}\r\n\r\nexport function isConnectMessage(m: Message): m is ConnectMessage {\r\n    return m.type === 'connect';\r\n}\r\n\r\nexport interface ChannelMessage extends Message {\r\n    type: 'data' | 'rping' | 'ping';\r\n    id: string;\r\n    fromDevice: boolean;\r\n}\r\n\r\nexport function isChannelMessage(m: Message): m is ChannelMessage {\r\n    return isDataMessage(m) || isRequestPing(m) || isPingMessage(m);\r\n}\r\n\r\nexport interface DataMessage extends ChannelMessage {\r\n    type: 'data';\r\n    data: any;\r\n}\r\n\r\nexport function isDataMessage(m: Message): m is DataMessage {\r\n    return m.type === 'data';\r\n}\r\n\r\nexport interface RequestPing extends ChannelMessage {\r\n    type: 'rping',\r\n    fromDevice: false,\r\n}\r\n\r\nexport interface Ping extends ChannelMessage {\r\n    type: 'ping',\r\n    fromDevice: true,\r\n}\r\n\r\nexport function isRequestPing(m: Message): m is RequestPing {\r\n    return m.type === 'rping';\r\n}\r\n\r\nexport function isPingMessage(m: Message): m is Ping {\r\n    return m.type === 'ping';\r\n}\r\n"]}